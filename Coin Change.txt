class Solution {
public:
    int fun(int ind, vector<int>& coins, int amount, vector<vector<int>> &dp){
        if(ind == 0){
            if(amount%coins[ind] == 0) return amount/coins[ind];
            else return 1e9;
        }
        if(dp[ind][amount] != -1) return dp[ind][amount];

        int notTake = fun(ind-1, coins, amount, dp);
        int take = INT_MAX;
        if(amount >= coins[ind]) take = 1 + fun(ind, coins, amount-coins[ind], dp);

        return dp[ind][amount] = min(take, notTake);
    }
    int coinChange(vector<int>& coins, int amount) {
        int n = coins.size();
        vector<vector<int>> dp(n, vector<int>(amount+1, 0));
        for(int i = 0 ; i <= amount ; i++ ){
            if(i%coins[0] == 0) dp[0][i] = i/coins[0];
            else dp[0][i] = 1e9;
        }

        for(int i=1;i<n;i++){
            for(int j=0;j<=amount;j++){
                int notTake = dp[i-1][j];
                int take = 1e9;
                if(j >= coins[i]) take = 1 + dp[i][j - coins[i]];

                dp[i][j] = min(take, notTake);
            }
        }
        if(dp[n-1][amount] >= 1e9) return -1;
        return dp[n-1][amount];
    }
};