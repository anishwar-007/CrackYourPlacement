
#include <bits/stdc++.h>
using namespace std;

struct Node {
	int data;
	struct Node* next;
};


void segregateEvenOdd(struct Node** head_ref)
{
	Node* evenStart = NULL;
	Node* evenEnd = NULL;
	Node* oddStart = NULL;
	Node* oddEnd = NULL;
	Node* currNode = *head_ref;

	while (currNode != NULL) {
		int val = currNode->data;

		if (val % 2 == 0) {
			if (evenStart == NULL) {
				evenStart = currNode;
				evenEnd = evenStart;
			}
			else {
				evenEnd->next = currNode;
				evenEnd = evenEnd->next;
			}
		}

		else {
			if (oddStart == NULL) {
				oddStart = currNode;
				oddEnd = oddStart;
			}
			else {
				oddEnd->next = currNode;
				oddEnd = oddEnd->next;
			}
		}

		currNode = currNode->next;
	}

	// If either odd list or even list is empty, no change
	// is required as all elements are either even or odd.
	if (oddStart == NULL || evenStart == NULL)
		return;

	// Add odd list after even list.
	evenEnd->next = oddStart;
	oddEnd->next = NULL;

	// Modify head pointer to starting of even list.
	*head_ref = evenStart;
}



