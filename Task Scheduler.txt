class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        unordered_map<char,int> m;
        priority_queue<int> q;
        for(char c:tasks) m[c]++;
        for(auto it:m) q.push(it.second);
        int res = 0;
        while(!q.empty()){
            vector<int> v;
            int time = 0;
            for(int i=0;i<n+1;i++){
                if(!q.empty()){
                    v.push_back(q.top() - 1);
                    q.pop();
                    time++;
                }
            }
            for(auto it:v) if(it) q.push(it);
            res += q.empty() ? time : n+1;
        }
        return res;
    }
};